var assert = require('assert')
var fs = require('fs')
var path = require('path')
require('../src/index')

// The purpose of these tests are just to make sure the functions actually return a valid JSON.
// Since we're using 3rd party libraries, we assume that their conversion logic works and focus on testing the interface only

var read = function(type){
	var filePath = path.join(__dirname, 'data/index.' + type)
	return fs.readFileSync(filePath, 'utf8')
}

describe.only('html', function() {
  it('should return -1 when the value is not present', function() {
    var res = read('html').to_json('html')
    console.log("rows = ", res.find(".row"))
  })
})

describe('markdown', function() {
  it('should return -1 when the value is not present', function() {
    var res = read('md').to_json('markdown')
    console.log(res)
  })
})

describe('csv', function() {
  it('should return -1 when the value is not present', function() {
    var c = read('csv')
    c.to_json('csv', function(res){
      console.log(res)	
    })
  })
})

describe('yaml', function() {
  it('should return -1 when the value is not present', function() {
    var res = read('yaml').to_json("yaml")
    console.log(res)
  })
})
describe('cson', function() {
  it('should return -1 when the value is not present', function() {
    var res = read('cson').to_json("cson")
    console.log(res)
  })
})
describe('hjson', function() {
  it('should return -1 when the value is not present', function() {
    var res = read('hjson').to_json("hjson")
    console.log(res)
  })
})
describe('svg', function() {
  it('should return -1 when the value is not present', function() {
    var res = read('svg').to_json("svg")
    console.log(res)
  })
})
